//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HoneySaleDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class honeysaleEntities : DbContext
    {
        public honeysaleEntities()
            : base("name=honeysaleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CustomerDetail> CustomerDetails { get; set; }
        public DbSet<CylinderMaster> CylinderMasters { get; set; }
        public DbSet<LoadCylinder> LoadCylinders { get; set; }
        public DbSet<ReturnCylinder> ReturnCylinders { get; set; }
        public DbSet<tblrole> tblroles { get; set; }
        public DbSet<UnloadCylinder> UnloadCylinders { get; set; }
        public DbSet<tbluser> tblusers { get; set; }
        public DbSet<PurchaseDetail> PurchaseDetails { get; set; }
        public DbSet<LoadDetail> LoadDetails { get; set; }
        public DbSet<ReturnDetail> ReturnDetails { get; set; }
        public DbSet<UnloadDetail> UnloadDetails { get; set; }
        public DbSet<PurchaseCylinder> PurchaseCylinders { get; set; }
        public DbSet<LiveCylinderDetail> LiveCylinderDetails { get; set; }
        public DbSet<CustomerCylinderDetail> CustomerCylinderDetails { get; set; }
        public DbSet<CustomerPaymentDetail> CustomerPaymentDetails { get; set; }
        public DbSet<DeliveryDetail> DeliveryDetails { get; set; }
        public DbSet<StaffPayment> StaffPayments { get; set; }
    
        public virtual ObjectResult<sp_AddCustomer_Result> sp_AddCustomer(string pFirstName, string pLastName, string pEmail, string pMobileNo, Nullable<double> pDiscount, string pAadhar, string pAddress, ObjectParameter responseMessage, ObjectParameter type, ObjectParameter msg)
        {
            var pFirstNameParameter = pFirstName != null ?
                new ObjectParameter("pFirstName", pFirstName) :
                new ObjectParameter("pFirstName", typeof(string));
    
            var pLastNameParameter = pLastName != null ?
                new ObjectParameter("pLastName", pLastName) :
                new ObjectParameter("pLastName", typeof(string));
    
            var pEmailParameter = pEmail != null ?
                new ObjectParameter("pEmail", pEmail) :
                new ObjectParameter("pEmail", typeof(string));
    
            var pMobileNoParameter = pMobileNo != null ?
                new ObjectParameter("pMobileNo", pMobileNo) :
                new ObjectParameter("pMobileNo", typeof(string));
    
            var pDiscountParameter = pDiscount.HasValue ?
                new ObjectParameter("pDiscount", pDiscount) :
                new ObjectParameter("pDiscount", typeof(double));
    
            var pAadharParameter = pAadhar != null ?
                new ObjectParameter("pAadhar", pAadhar) :
                new ObjectParameter("pAadhar", typeof(string));
    
            var pAddressParameter = pAddress != null ?
                new ObjectParameter("pAddress", pAddress) :
                new ObjectParameter("pAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddCustomer_Result>("sp_AddCustomer", pFirstNameParameter, pLastNameParameter, pEmailParameter, pMobileNoParameter, pDiscountParameter, pAadharParameter, pAddressParameter, responseMessage, type, msg);
        }
    
        public virtual ObjectResult<userLogin_Result> userLogin(string pUserName, string pPassword, ObjectParameter status, ObjectParameter message)
        {
            var pUserNameParameter = pUserName != null ?
                new ObjectParameter("pUserName", pUserName) :
                new ObjectParameter("pUserName", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("pPassword", pPassword) :
                new ObjectParameter("pPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<userLogin_Result>("userLogin", pUserNameParameter, pPasswordParameter, status, message);
        }
    
        public virtual int userLogin1(string pUserName, string pPassword, ObjectParameter status, ObjectParameter message)
        {
            var pUserNameParameter = pUserName != null ?
                new ObjectParameter("pUserName", pUserName) :
                new ObjectParameter("pUserName", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("pPassword", pPassword) :
                new ObjectParameter("pPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("userLogin1", pUserNameParameter, pPasswordParameter, status, message);
        }
    }
}
